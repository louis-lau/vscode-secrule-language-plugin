scopeName: source.secrules
name: SecRules
fileTypes:
  - conf
patterns:
  - include: '#comments'
  - include: '#directives'

repository:
  comments:
    patterns:
      - name: comment.line.number-sign.secrules
        match: '#.*$'

  directives:
    patterns:
      # SecRule directive
      - name: meta.secrule.secrules
        begin: \b(SecRule)\b
        beginCaptures:
          '1': {name: keyword.control.directive.secrules}
        end: ^(?=\S)
        patterns:
          - include: '#line-continuation'
          - include: '#directives'
          - include: '#variables'
          - include: '#operator-string'
          - include: '#plain-string'
          - include: '#action-string'

      # SecAction directive  
      - name: meta.secaction.secrules
        begin: \b(SecAction)\b
        beginCaptures:
          '1': {name: keyword.control.directive.secrules}
        end: ^(?=\S)
        patterns:
          - include: '#line-continuation'
          - include: '#action-string'

      # Other Sec directives
      - name: keyword.control.directive.secrules
        match: \b(SecMarker|SecDefaultAction|SecRuleRemoveById|SecRuleRemoveByMsg|SecRuleRemoveByTag|SecRuleUpdateActionById|SecRuleUpdateTargetById|SecRuleUpdateTargetByMsg|SecRuleUpdateTargetByTag|SecRuleScript|SecComponentSignature|SecArgumentSeparator|SecArgumentsLimit|SecAuditEngine|SecAuditLog|SecAuditLog2|SecAuditLogDirMode|SecAuditLogFileMode|SecAuditLogFormat|SecAuditLogParts|SecAuditLogRelevantStatus|SecAuditLogStorageDir|SecAuditLogType|SecAuditLogPrefix|SecDebugLog|SecDebugLogLevel|SecGeoLookupDb|SecHttpBlKey|SecParseXmlIntoArgs|SecPcreMatchLimit|SecRemoteRules|SecRemoteRulesFailAction|SecRequestBodyAccess|SecRequestBodyJsonDepthLimit|SecRequestBodyLimit|SecRequestBodyNoFilesLimit|SecRequestBodyLimitAction|SecResponseBodyLimit|SecResponseBodyLimitAction|SecResponseBodyMimeType|SecResponseBodyMimeTypesClear|SecResponseBodyAccess|SecRuleEngine|SecStatusEngine|SecTmpDir|SecTmpSaveUploadedFiles|SecUnicodeMapFile|SecUploadDir|SecUploadFileLimit|SecUploadFileMode|SecUploadKeepFiles|SecWebAppId|SecXmlExternalEntity)\b

  line-continuation:
    patterns:
      - name: constant.character.escape.secrules
        match: \\$

  variables:
    patterns:
      # Macro expansion %{VARIABLE.field}
      - name: variable.other.macro.secrules
        match: (%\{)([A-Z_]+(?:\.[A-Za-z0-9_\-]+)?)(\})
        captures:
          '1': {name: punctuation.definition.macro.begin.secrules}
          '2': {name: variable.other.readwrite.secrules}
          '3': {name: punctuation.definition.macro.end.secrules}

      # Variable with collection parameter ARGS:param
      - name: meta.variable.collection.secrules
        match: \b([A-Z_]+:)([a-zA-Z0-9_\-\.\[\]]+)
        captures:
          '1': {name: variable.language.secrules}
          '2': {name: string.unquoted.secrules}

      # Variable with regex /pattern/
      - name: meta.variable.regex.secrules
        match: \b([A-Z_]+:)(/[^/\s]+/)
        captures:
          '1': {name: variable.language.secrules}
          '2': {name: string.regexp.secrules}

      # Variable count operator &
      - name: keyword.operator.count.secrules
        match: '&'

      # Pipe separator
      - name: keyword.operator.pipe.secrules
        match: \|

      # Negation
      - name: keyword.operator.logical.secrules
        match: '!'

      # Standard variables
      - name: variable.language.secrules
        match: \b(ARGS|ARGS_COMBINED_SIZE|ARGS_GET|ARGS_GET_NAMES|ARGS_NAMES|ARGS_POST|ARGS_POST_NAMES|AUTH_TYPE|DURATION|ENV|FILES|FILES_COMBINED_SIZE|FILES_NAMES|FULL_REQUEST|FULL_REQUEST_LENGTH|FILES_SIZES|FILES_TMPNAMES|FILES_TMP_CONTENT|GEO|HIGHEST_SEVERITY|INBOUND_DATA_ERROR|MATCHED_VAR|MATCHED_VARS|MATCHED_VAR_NAME|MATCHED_VARS_NAMES|MODSEC_BUILD|MSC_PCRE_LIMITS_EXCEEDED|MULTIPART_CRLF_LF_LINES|MULTIPART_FILENAME|MULTIPART_NAME|MULTIPART_PART_HEADERS|MULTIPART_STRICT_ERROR|MULTIPART_UNMATCHED_BOUNDARY|OUTBOUND_DATA_ERROR|PATH_INFO|QUERY_STRING|REMOTE_ADDR|REMOTE_HOST|REMOTE_PORT|REMOTE_USER|REQBODY_ERROR|REQBODY_ERROR_MSG|REQBODY_PROCESSOR|REQUEST_BASENAME|REQUEST_BODY|REQUEST_BODY_LENGTH|REQUEST_COOKIES|REQUEST_COOKIES_NAMES|REQUEST_FILENAME|REQUEST_HEADERS|REQUEST_HEADERS_NAMES|REQUEST_LINE|REQUEST_METHOD|REQUEST_PROTOCOL|REQUEST_URI|REQUEST_URI_RAW|RESPONSE_BODY|RESPONSE_CONTENT_LENGTH|RESPONSE_CONTENT_TYPE|RESPONSE_HEADERS|RESPONSE_HEADERS_NAMES|RESPONSE_PROTOCOL|RESPONSE_STATUS|RULE|SERVER_ADDR|SERVER_NAME|SERVER_PORT|SESSION|SESSIONID|STATUS_LINE|TIME|TIME_DAY|TIME_EPOCH|TIME_HOUR|TIME_MIN|TIME_MON|TIME_SEC|TIME_WDAY|TIME_YEAR|TX|UNIQUE_ID|URLENCODED_ERROR|USERID|WEBAPPID|XML)\b

  plain-string:
    patterns:
      # Plain quoted string (implicit @rx pattern) - doesn't contain action keywords like id:, phase:, etc.
      - name: string.quoted.double.secrules
        match: '"(?!.*\b(?:id|phase|t|pass|deny|block|allow|drop|redirect|log|nolog|msg|ctl|setvar|chain):)[^"]*"'
        
  operator-string:
    patterns:
      # Operators without arguments (just "@operator")
      - name: meta.operator.standalone.secrules
        match: '"(@[a-zA-Z]+)"'
        captures:
          '0': {name: string.quoted.double.secrules}
          '1': {name: support.function.secrules}
      
      # Operators with values - any operator with a space and value after it
      - name: meta.operator.value.secrules
        begin: '(")((!?)(@[a-zA-Z]+))\s+'
        beginCaptures:
          '1': {name: string.quoted.double.secrules}
          '3': {name: keyword.operator.logical.secrules}
          '4': {name: support.function.secrules}
        end: '"'
        endCaptures:
          '0': {name: string.quoted.double.secrules}
        contentName: string.unquoted.secrules

  action-string:
    patterns:
      # Action string - the quoted string with actions (doesn't start with @)
      - name: meta.actions.secrules
        begin: '"(?!@)'
        beginCaptures:
          '0': {name: string.quoted.double.secrules}
        end: '"'
        endCaptures:
          '0': {name: string.quoted.double.secrules}
        patterns:
          - include: '#line-continuation'
          - include: '#action-list'

  action-list:
    patterns:
      # Transformation t:function
      - name: meta.transformation.secrules
        match: (t:)(none|base64Decode|base64DecodeExt|base64Encode|cmdLine|compressWhitespace|cssDecode|escapeSeqDecode|hexDecode|hexEncode|htmlEntityDecode|jsDecode|length|lowercase|md5|normalisePath|normalizePath|normalisePathWin|normalizePathWin|parityEven7bit|parityOdd7bit|parityZero7bit|removeNulls|removeWhitespace|replaceComments|removeCommentsChar|removeComments|replaceNulls|sqlHexDecode|urlDecode|uppercase|urlDecodeUni|urlEncode|utf8toUnicode|sha1|trimLeft|trimRight|trim)\b
        captures:
          '1': {name: keyword.other.transformation.secrules}
          '2': {name: string.unquoted.secrules}

      # phase:N
      - name: meta.phase.secrules
        match: (phase:)(\d+|request|response|logging)\b
        captures:
          '1': {name: keyword.other.phase.secrules}
          '2': {name: constant.numeric.secrules}

      # id:number
      - name: meta.id.secrules
        match: (id:)(\d+)\b
        captures:
          '1': {name: keyword.other.id.secrules}
          '2': {name: constant.numeric.id.secrules}

      # status:number
      - name: meta.status.secrules
        match: (status:)(\d+)\b
        captures:
          '1': {name: keyword.other.status.secrules}
          '2': {name: constant.numeric.secrules}

      # severity:level
      - name: meta.severity.secrules
        match: (severity:)(['"]?\d+['"]?|EMERGENCY|ALERT|CRITICAL|ERROR|WARNING|NOTICE|INFO|DEBUG)\b
        captures:
          '1': {name: keyword.other.severity.secrules}
          '2': {name: constant.language.secrules}

      # ctl:ruleRemoveTargetById=number;ARGS:param
      - name: meta.ctl.ruleRemoveTargetById.secrules
        match: (ctl:)(ruleRemoveTargetById|ruleRemoveTargetByMsg)(=)(\d+)(;)([A-Z_]+)(:)([a-zA-Z0-9_\-\.\[\]]+)
        captures:
          '1': {name: keyword.control.ctl.secrules}
          '2': {name: support.function.ctl.secrules}
          '3': {name: keyword.operator.assignment.secrules}
          '4': {name: constant.numeric.secrules}
          '5': {name: punctuation.separator.semicolon.secrules}
          '6': {name: variable.language.secrules}
          '7': {name: variable.language.secrules}
          '8': {name: string.unquoted.secrules}

      # ctl:ruleRemoveTargetByTag=TAG_NAME;ARGS:param
      - name: meta.ctl.ruleRemoveTargetByTag.secrules
        match: (ctl:)(ruleRemoveTargetByTag)(=)([a-zA-Z0-9_\/\-]+)(;)([A-Z_]+)(:)([a-zA-Z0-9_\-\.\[\]]+)
        captures:
          '1': {name: keyword.control.ctl.secrules}
          '2': {name: support.function.ctl.secrules}
          '3': {name: keyword.operator.assignment.secrules}
          '4': {name: string.unquoted.tag.secrules}
          '5': {name: punctuation.separator.semicolon.secrules}
          '6': {name: variable.language.secrules}
          '7': {name: variable.language.secrules}
          '8': {name: string.unquoted.secrules}

      # Generic ctl:action
      - name: meta.ctl.secrules
        match: (ctl:)([a-zA-Z_]+)(=?)([^,"]*)
        captures:
          '1': {name: keyword.control.ctl.secrules}
          '2': {name: support.function.ctl.secrules}
          '3': {name: keyword.operator.assignment.secrules}
          '4': {name: string.unquoted.secrules}

      # msg:text with variable support
      - name: meta.msg.secrules
        match: (msg:)(['"]?)
        captures:
          '1': {name: keyword.other.msg.secrules}
          '2': {name: string.quoted.double.secrules}

      # logdata, tag, ver, rev, maturity, accuracy
      - name: meta.metadata.secrules
        match: ((?:logdata|tag|ver|rev|maturity|accuracy):)([^,"]+)
        captures:
          '1': {name: keyword.other.metadata.secrules}
          '2': 
            patterns:
              - include: '#variables'

      # setvar:variable=value
      - name: meta.setvar.secrules
        match: ((?:setvar|setenv|expirevar):)([^,"]+)
        captures:
          '1': {name: keyword.control.setvar.secrules}
          '2':
            patterns:
              - include: '#variables'
              - match: '='
                name: keyword.operator.assignment.secrules

      # skipAfter:label
      - name: meta.skipafter.secrules
        match: (skipAfter:)([^,"]+)
        captures:
          '1': {name: keyword.control.flow.secrules}
          '2': {name: entity.name.label.secrules}

      # skip:number
      - name: meta.skip.secrules
        match: (skip:)(\d+)
        captures:
          '1': {name: keyword.control.flow.secrules}
          '2': {name: constant.numeric.secrules}

      # initcol, setsid, setuid, setrsc
      - name: meta.init.secrules
        match: ((?:initcol|setsid|setuid|setrsc):)([^,"]+)
        captures:
          '1': {name: keyword.control.init.secrules}
          '2':
            patterns:
              - include: '#variables'

      # exec:filepath
      - name: meta.exec.secrules
        match: (exec:)([^,"]+)
        captures:
          '1': {name: keyword.control.exec.secrules}
          '2': {name: string.unquoted.filepath.secrules}

      # Disruptive actions
      - name: keyword.control.disruptive.secrules
        match: \b(allow|block|deny|drop|pass|redirect|proxy)\b

      # Non-disruptive actions
      - name: keyword.control.action.secrules
        match: \b(log|nolog|auditlog|noauditlog|capture|chain|multiMatch|pause)\b

      # Variables in actions
      - include: '#variables'

      # Comma separator
      - name: punctuation.separator.comma.secrules
        match: ','
      
      # Plain content (catch-all for regex patterns, values, etc.) - non-whitespace only
      - name: string.unquoted.secrules
        match: '[^",\\\s]+'